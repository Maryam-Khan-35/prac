Task 2:
Implement the Bounded-Buffer problem using Semaphore for multiple producers and consumers.
Solution:
#include <iostream>
#include <thread>
#include <vector>
#include <queue>
#include <semaphore.h>
#include <mutex>
#include <unistd.h> // for sleep

using namespace std;

const int BUFFER_SIZE = 5;
queue<int> buffer;

sem_t emptySlots;  // semaphore to track empty buffer slots
sem_t fullSlots;   // semaphore to track full buffer slots
mutex mtx;         // mutex for critical section

int itemID = 0;

// Producer function
void producer(int id) {
    while (true) {
        int item = ++itemID;
        sem_wait(&emptySlots); // wait if buffer is full
        {
            lock_guard<mutex> lock(mtx);
            buffer.push(item);
            cout << "Producer " << id << " produced item " << item << endl;
        }
        sem_post(&fullSlots); // signal that buffer has new item
        sleep(1); // simulate delay
    }
}

// Consumer function
void consumer(int id) {
    while (true) {
        sem_wait(&fullSlots); // wait if buffer is empty
        int item;
        {
            lock_guard<mutex> lock(mtx);
            item = buffer.front();
            buffer.pop();
            cout << "Consumer " << id << " consumed item " << item << endl;
        }
        sem_post(&emptySlots); // signal that one slot is empty
        sleep(2); // simulate delay
    }
}

int main() {
    // Initialize semaphores
    sem_init(&emptySlots, 0, BUFFER_SIZE);
    sem_init(&fullSlots, 0, 0);

    // Create producer and consumer threads
    vector<thread> producers, consumers;

    for (int i = 1; i <= 2; i++)
        producers.emplace_back(producer, i);

    for (int i = 1; i <= 2; i++)
        consumers.emplace_back(consumer, i);

    // Join threads (runs infinitely, can be stopped manually)
    for (auto& p : producers) p.join();
    for (auto& c : consumers) c.join();

    // Destroy semaphores (not reached, but good practice)
    sem_destroy(&emptySlots);
    sem_destroy(&fullSlots);

    return 0;
}
